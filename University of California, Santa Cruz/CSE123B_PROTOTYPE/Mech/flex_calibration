#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "esp_system.h"
#include "esp_log.h"
#include "driver/adc.h"
#include "driver/ledc.h"
#include "driver/gpio.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"


// === CONFIGURATIONS ===
#define SENSOR_COUNT          5
#define CALIB_SAMPLES         10
#define SAMPLE_COUNT          10
#define SAMPLE_INTERVAL_MS    50
#define MIN_VOLTAGE           0.25f
#define MAX_VOLTAGE           1.2f
#define FLEX_SENSITIVITY_GAMMA 0.317f


#define SERVO1_GPIO           5
#define SERVO2_GPIO           7
#define SERVO_PWM_FREQ        50
#define SERVO_PWM_RES         LEDC_TIMER_13_BIT
#define SERVO1_CHANNEL        LEDC_CHANNEL_0
#define SERVO2_CHANNEL        LEDC_CHANNEL_1
#define SERVO_STOP_MS         1.5f
#define SERVO_MIN_MS          1.45f
#define SERVO_MAX_MS          1.65f
#define BOOT_BTN_GPIO         9
#define PAUSE_BETWEEN_SETS_MS 2000


// Calibration anchors
static const float A30_1    = 6000.0f, A30_2    = 2200.0f;
static const float A30_1rev = 4500.0f, A30_2rev = 1200.0f;
static const float A60_1    = 9500.0f, A60_2    = 6000.0f;
static const float A60_1rev = 6900.0f, A60_2rev = 3900.0f;


static const adc1_channel_t flex_channels[SENSOR_COUNT] = {
    ADC1_CHANNEL_0, ADC1_CHANNEL_1, ADC1_CHANNEL_2,
    ADC1_CHANNEL_3, ADC1_CHANNEL_4
};
static float baseline[SENSOR_COUNT];
static float readings[SENSOR_COUNT][SAMPLE_COUNT];
static int sample_index = 0;


// Dynamic timing globals
static float one_rot_ms, two_rot_ms, one_rev_ms, two_rev_ms;
static const char *TAG = "runner";


// === UTILITY FUNCTIONS ===
uint32_t ms_to_duty(float ms) {
    return (uint32_t)((ms / 20.0f) * ((1 << 13) - 1));
}


void setup_servo(int gpio, ledc_channel_t ch) {
    ledc_channel_config_t cfg = {
        .gpio_num   = gpio,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .channel    = ch,
        .timer_sel  = LEDC_TIMER_0,
        .duty       = 0,
        .hpoint     = 0
    };
    ledc_channel_config(&cfg);
}


void set_servo_pulse(ledc_channel_t ch, float pulse_ms) {
    ledc_set_duty(LEDC_LOW_SPEED_MODE, ch, ms_to_duty(pulse_ms));
    ledc_update_duty(LEDC_LOW_SPEED_MODE, ch);
}


void stop_all_servos() {
    set_servo_pulse(SERVO1_CHANNEL, SERVO_STOP_MS);
    ledc_stop(LEDC_LOW_SPEED_MODE, SERVO1_CHANNEL, 0);
    set_servo_pulse(SERVO2_CHANNEL, SERVO_STOP_MS);
    ledc_stop(LEDC_LOW_SPEED_MODE, SERVO2_CHANNEL, 0);
}


bool boot_button_pressed() {
    return gpio_get_level(BOOT_BTN_GPIO) == 0;
}


// === FLEX SAMPLING ===
void sample_and_log_flex() {
    for (int s = 0; s < SENSOR_COUNT; s++) {
        int raw = adc1_get_raw(flex_channels[s]);
        float voltage = (raw / 4095.0f) * 3.3f;
        readings[s][sample_index] = voltage;
    }
    sample_index++;
    if (sample_index >= SAMPLE_COUNT) {
        for (int s = 0; s < SENSOR_COUNT; s++) {
            float sum = 0, var = 0;
            for (int j = 0; j < SAMPLE_COUNT; j++) sum += readings[s][j];
            float mean = sum / SAMPLE_COUNT;
            for (int j = 0; j < SAMPLE_COUNT; j++) {
                float d = readings[s][j] - mean;
                var += d * d;
            }
            float stddev = sqrtf(var / SAMPLE_COUNT);
            float fsum = 0; int cnt = 0;
            for (int j = 0; j < SAMPLE_COUNT; j++) {
                if (fabsf(readings[s][j] - mean) <= stddev) {
                    fsum += readings[s][j]; cnt++;
                }
            }
            float avg = cnt ? (fsum / cnt) : mean;
            float range = MAX_VOLTAGE - baseline[s];
            float pct = range > 0 ? ((avg - baseline[s]) / range) * 100.0f : 0;
            pct = fmaxf(0, fminf(100, pct));
            pct = powf(pct / 100.0f, FLEX_SENSITIVITY_GAMMA) * 100.0f;
            pct = fmaxf(0, fminf(100, pct));
            ESP_LOGI("FLEX", "Sensor %d | Flex: %.1f%%", s, pct);
        }
        sample_index = 0;
    }
}


// === TIMING INTERPOLATION ===
void set_durations_for_value(float v) {
    if (v <= 0) {
        one_rot_ms = two_rot_ms = one_rev_ms = two_rev_ms = 0;
        return;
    }
    if (v > 60) v = 60;
    if (v <= 30) {
        float f = v / 30.0f;
        one_rot_ms    = f * A30_1;
        two_rot_ms    = f * A30_2;
        one_rev_ms    = f * A30_1rev;
        two_rev_ms    = f * A30_2rev;
    } else {
        float f = (v - 30) / 30.0f;
        one_rot_ms    = A30_1    + f * (A60_1    - A30_1);
        two_rot_ms    = A30_2    + f * (A60_2    - A30_2);
        one_rev_ms    = A30_1rev + f * (A60_1rev - A30_1rev);
        two_rev_ms    = A30_2rev + f * (A60_2rev - A30_2rev);
    }
}


// === SERVO MOTION ===
void run_servo_with_interrupt(ledc_channel_t ch, float pulse_ms, int dur_ms) {
    set_servo_pulse(ch, pulse_ms);
    int elapsed = 0, flex_timer = 0;
    while (elapsed < dur_ms) {
        if (boot_button_pressed()) { stop_all_servos(); return; }
        vTaskDelay(pdMS_TO_TICKS(10));
        elapsed += 10; flex_timer += 10;
        if (flex_timer >= SAMPLE_INTERVAL_MS) {
            sample_and_log_flex(); flex_timer = 0;
        }
    }
    ledc_stop(LEDC_LOW_SPEED_MODE, ch, 0);
}


void run_servo_sequence(int reps) {
    for (int rep = 0; rep < reps; rep++) {
        if (boot_button_pressed()) break;
        run_servo_with_interrupt(SERVO1_CHANNEL, SERVO_MIN_MS, (int)one_rot_ms);
        vTaskDelay(pdMS_TO_TICKS(PAUSE_BETWEEN_SETS_MS));
        if (boot_button_pressed()) break;
        run_servo_with_interrupt(SERVO1_CHANNEL, SERVO_MAX_MS, (int)one_rev_ms);
        vTaskDelay(pdMS_TO_TICKS(PAUSE_BETWEEN_SETS_MS));
        if (boot_button_pressed()) break;
        run_servo_with_interrupt(SERVO2_CHANNEL, SERVO_MIN_MS, (int)two_rot_ms);
        vTaskDelay(pdMS_TO_TICKS(PAUSE_BETWEEN_SETS_MS));
        if (boot_button_pressed()) break;
        run_servo_with_interrupt(SERVO2_CHANNEL, SERVO_MAX_MS, (int)two_rev_ms);
        vTaskDelay(pdMS_TO_TICKS(PAUSE_BETWEEN_SETS_MS));
    }
    stop_all_servos();
    ESP_LOGI(TAG, "Exercise Completed");
}


// === EXERCISE ENTRY POINT ===
void start_exercise(int reps, float flex_value) {
    set_durations_for_value(flex_value);
    run_servo_sequence(reps);
}


void app_main(void) {
    // ADC calibration
    adc1_config_width(ADC_WIDTH_BIT_12);
    for (int i = 0; i < SENSOR_COUNT; i++) {
        adc1_config_channel_atten(flex_channels[i], ADC_ATTEN_DB_11);
        float sum = 0;
        for (int n = 0; n < CALIB_SAMPLES; n++) {
            int raw = adc1_get_raw(flex_channels[i]);
            sum += (raw / 4095.0f) * 3.3f;
            vTaskDelay(pdMS_TO_TICKS(SAMPLE_INTERVAL_MS));
        }
        baseline[i] = sum / CALIB_SAMPLES;
        ESP_LOGI(TAG, "Sensor %d baseline: %.3f V", i, baseline[i]);
    }


    // PWM setup
    ledc_timer_config_t t = {
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .duty_resolution = SERVO_PWM_RES,
        .timer_num = LEDC_TIMER_0,
        .freq_hz = SERVO_PWM_FREQ,
        .clk_cfg = LEDC_AUTO_CLK
    };
    ledc_timer_config(&t);
    setup_servo(SERVO1_GPIO, SERVO1_CHANNEL);
    setup_servo(SERVO2_GPIO, SERVO2_CHANNEL);


    // Example usage: 5 reps at 40% flex
    start_exercise(5, 40.0f);
}







