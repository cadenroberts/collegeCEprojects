#include <stdio.h>
#include <math.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/ledc.h"
#include "driver/adc.h"
#include "esp_timer.h"
#include "esp_log.h"

// === CONFIGURATION ===
#define FINGER_ANGLE_DEG    30   // ðŸ”§ Set this between 0 and 60 degrees
#define MOTION_CYCLES       5    // Number of back-and-forth cycles
#define MOTION_STEPS        100  // Resolution of motion (higher = smoother)

// === TIMING CALCULATION ===
// 20Â° = 5 sec â†’ 0.25 sec per degree
#define SECONDS_PER_DEGREE  0.25f
#define SERVO1_GPIO         5
#define SERVO2_GPIO         7
#define SERVO_PWM_FREQ      50
#define SERVO_PWM_RES       LEDC_TIMER_13_BIT
#define SERVO1_CHANNEL      LEDC_CHANNEL_0
#define SERVO2_CHANNEL      LEDC_CHANNEL_1
#define SERVO_MIN_MS        1.0f
#define SERVO_MAX_MS        2.0f

#define BOOT_BTN_GPIO       9
#define SENSOR_COUNT        5
#define CALIB_SAMPLES       10
#define SAMPLE_COUNT        10
#define SAMPLE_INTERVAL_MS  50
#define MIN_VOLTAGE         0.25f
#define MAX_VOLTAGE         1.2f

static const adc1_channel_t flex_channels[SENSOR_COUNT] = {
    ADC1_CHANNEL_0,  // GPIO36
    ADC1_CHANNEL_1,  // GPIO37
    ADC1_CHANNEL_2,  // GPIO38
    ADC1_CHANNEL_3,  // GPIO39
    ADC1_CHANNEL_4   // GPIO32
};

uint32_t ms_to_duty(float ms) {
    float percent = (ms / 20.0f) * 100.0f;
    return (uint32_t)((percent / 100.0f) * ((1 << 13) - 1));
}

void setup_servo(int gpio, ledc_channel_t channel) {
    ledc_channel_config_t channel_conf = {
        .gpio_num   = gpio,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .channel    = channel,
        .timer_sel  = LEDC_TIMER_0,
        .duty       = 0,
        .hpoint     = 0
    };
    ledc_channel_config(&channel_conf);
}

void set_servo_pulse(ledc_channel_t channel, float pulse_ms) {
    ledc_set_duty(LEDC_LOW_SPEED_MODE, channel, ms_to_duty(pulse_ms));
    ledc_update_duty(LEDC_LOW_SPEED_MODE, channel);
}

void stop_all_servos() {
    set_servo_pulse(SERVO1_CHANNEL, 1.5f);
    set_servo_pulse(SERVO2_CHANNEL, 1.5f);
    ledc_stop(LEDC_LOW_SPEED_MODE, SERVO1_CHANNEL, 0);
    ledc_stop(LEDC_LOW_SPEED_MODE, SERVO2_CHANNEL, 0);
}

bool boot_button_pressed() {
    return gpio_get_level(BOOT_BTN_GPIO) == 0; //doesn't work? 
}

void app_main(void) {
    // === Initialize BOOT button ===
    gpio_config_t io_conf = {
        .pin_bit_mask = (1ULL << BOOT_BTN_GPIO),
        .mode = GPIO_MODE_INPUT,
        .pull_up_en = GPIO_PULLUP_ENABLE,
        .pull_down_en = GPIO_PULLDOWN_DISABLE,
        .intr_type = GPIO_INTR_DISABLE
    };
    gpio_config(&io_conf);

    // === Initialize LEDC timer & servos ===
    ledc_timer_config_t timer_conf = {
        .speed_mode       = LEDC_LOW_SPEED_MODE,
        .duty_resolution  = SERVO_PWM_RES,
        .timer_num        = LEDC_TIMER_0,
        .freq_hz          = SERVO_PWM_FREQ,
        .clk_cfg          = LEDC_AUTO_CLK
    };
    ledc_timer_config(&timer_conf);
    setup_servo(SERVO1_GPIO, SERVO1_CHANNEL);
    setup_servo(SERVO2_GPIO, SERVO2_CHANNEL);

    // === Initialize ADC ===
    adc1_config_width(ADC_WIDTH_BIT_12);
    for (int i = 0; i < SENSOR_COUNT; i++) {
        adc1_config_channel_atten(flex_channels[i], ADC_ATTEN_DB_11);
    }

    // === Baseline calibration ===
    float baseline[SENSOR_COUNT] = {0};
    for (int s = 0; s < SENSOR_COUNT; s++) {
        float sum = 0;
        for (int n = 0; n < CALIB_SAMPLES; n++) {
            int raw = adc1_get_raw(flex_channels[s]);
            float voltage = (raw / 4095.0f) * 3.3f;
            sum += voltage;
            vTaskDelay(pdMS_TO_TICKS(SAMPLE_INTERVAL_MS));
        }
        baseline[s] = sum / CALIB_SAMPLES;
        ESP_LOGI("CALIB", "Sensor %d baseline: %.3f V", s, baseline[s]);
    }

    float readings[SENSOR_COUNT][SAMPLE_COUNT] = {0};
    int sample_index = 0;

    // === Motion parameters ===
    float motion_duration_sec = FINGER_ANGLE_DEG * SECONDS_PER_DEGREE;
    int delay_per_step_ms = (int)((motion_duration_sec * 1000) / MOTION_STEPS);
    float range_ms = SERVO_MAX_MS - SERVO_MIN_MS;
    float motion_fraction = FINGER_ANGLE_DEG / 60.0f;
    float pulse_delta = range_ms * motion_fraction;

    float min_pulse = SERVO_MIN_MS + (range_ms - pulse_delta) / 2.0f;
    float max_pulse = SERVO_MAX_MS - (range_ms - pulse_delta) / 2.0f;

    int cycles_completed = 0;
    int angle_step = 0;
    bool forward = true;

    while (cycles_completed < MOTION_CYCLES && !boot_button_pressed()) {
        // === Move finger ===
        float t = (float)angle_step / MOTION_STEPS;
        float pos_ms = min_pulse + (max_pulse - min_pulse) * t;
        float neg_ms = max_pulse - (max_pulse - min_pulse) * t;

        set_servo_pulse(SERVO1_CHANNEL, pos_ms);  // flex
        set_servo_pulse(SERVO2_CHANNEL, neg_ms);  // release

        // === Update direction ===
        if (forward) {
            angle_step++;
            if (angle_step >= MOTION_STEPS) {
                forward = false;
            }
        } else {
            angle_step--;
            if (angle_step <= 0) {
                forward = true;
                cycles_completed++;
            }
        }

        // === Sample flex sensors ===
        for (int s = 0; s < SENSOR_COUNT; s++) {
            int raw = adc1_get_raw(flex_channels[s]);
            float voltage = (raw / 4095.0f) * 3.3f;
            readings[s][sample_index] = voltage;
        }

        sample_index++;
        if (sample_index >= SAMPLE_COUNT) {
            for (int s = 0; s < SENSOR_COUNT; s++) {
                float sum = 0;
                for (int j = 0; j < SAMPLE_COUNT; j++) sum += readings[s][j];
                float mean = sum / SAMPLE_COUNT;
                float var = 0;
                for (int j = 0; j < SAMPLE_COUNT; j++) {
                    var += powf(readings[s][j] - mean, 2);
                }
                float std_dev = sqrtf(var / SAMPLE_COUNT);
                float fsum = 0; int cnt = 0;
                for (int j = 0; j < SAMPLE_COUNT; j++) {
                    if (fabsf(readings[s][j] - mean) <= std_dev) {
                        fsum += readings[s][j]; cnt++;
                    }
                }
                float avg = cnt ? fsum / cnt : mean;
                float range = MAX_VOLTAGE - baseline[s];
                float pct = range > 0 ? ((avg - baseline[s]) / range) * 100.0f : 0;
                if (pct < 0) pct = 0;
                if (pct > 100) pct = 100;
                ESP_LOGI("FLEX", "Sensor %d | Flex: %.1f%%", s, pct);
            }
            sample_index = 0;
        }

        vTaskDelay(pdMS_TO_TICKS(delay_per_step_ms));
    }

    stop_all_servos();
    ESP_LOGI("SYSTEM", "Motion completed or stopped by BOOT button."); //force stop
}
