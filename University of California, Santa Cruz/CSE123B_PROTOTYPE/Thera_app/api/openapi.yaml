openapi: '3.0.3'

info:
  title: CSE186 Assignment 8 Backend
  version: 0.1.0
  description: CSE186 Assignment 8 Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /login:
    post:
      description: Login
      requestBody:
        description: Request Body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        200:
          description: Login Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /home:
    get:
      security:
        - bearerAuth: []
      description: Home information for user
      responses:
        401:
          description: Unauthorized
        200:
          description: Fingers Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Finger'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /home/{doctor_id}:
    get:
      security:
        - bearerAuth: []
      description: Get list of patients assigned to a specific doctor
      parameters:
        - name: doctor_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    email:
                      type: string
                    name:
                      type: string
        403:
          description: Forbidden
        401:
          description: Unauthorized

  /getmessages/{patient_id}:
    get:
      security:
        - bearerAuth: []
      description: Get messages between the logged-in user and the specified patient
      parameters:
        - name: patient_id
          in: path
          required: true
          description: UUID of the patient
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  /sendmessage/{patient_id}:
    post:
      security:
        - bearerAuth: []
      description: Send a message between the logged-in user and the specified patient
      parameters:
        - name: patient_id
          in: path
          required: true
          description: UUID of the patient
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
      responses:
        201:
          description: Message successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  sent_at:
                    type: string
                    format: date-time
        400:
          description: Invalid request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /doctor/{patient_id}:
    get:
      security:
        - bearerAuth: []
      description: Get the doctor assigned to a given patient
      parameters:
        - name: patient_id
          in: path
          required: true
          description: UUID of the patient
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Assigned doctor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Doctor not found
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  /create/{doctor_id}:
    post:
      summary: Doctor creates a new patient
      description: Only the logged-in doctor can create and assign a new patient
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: doctor_id
          required: true
          schema:
            type: string
          description: ID of the logged-in doctor creating the patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        '201':
          description: Patient created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
        '400':
          description: Missing fields
        '403':
          description: Unauthorized or not the logged-in doctor
        '409':
          description: Email already in use
        '500':
          description: Internal server error
  /deletemessage/{message_id}:
    delete:
      security:
        - bearerAuth: []
      description: Delete a message by its ID (only sender can delete)
      parameters:
        - name: message_id
          in: path
          required: true
          description: UUID of the message to delete
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Message successfully deleted
        401:
          description: Unauthorized
        403:
          description: Forbidden not the sender of the message
        404:
          description: Message not found
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /createdoctor/{admin_id}:
    post:
      summary: Admin creates a new doctor
      description: Only the logged-in admin can create and assign a new doctor
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: admin_id
          required: true
          schema:
            type: string
          description: ID of the logged-in admin creating the doctor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        '201':
          description: Doctor created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
        '400':
          description: Missing fields
        '403':
          description: Unauthorized or not the logged-in admin
        '409':
          description: Email already in use
        '500':
          description: Internal server error
  /doctors:
    get:
      summary: Get all doctors (admin only)
      description: Returns a list of all registered doctors. Only accessible by admins.
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
        401:
          description: Unauthorized
        403:
          description: Forbidden â€“ Only admins can access this
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  /deletepatient/{patient_id}:
    delete:
      security:
        - bearerAuth: []
      description: Delete a patient and all messages involving them (as sender or recipient)
      parameters:
        - name: patient_id
          in: path
          required: true
          description: UUID of the patient to delete
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Patient and associated messages deleted
        401:
          description: Unauthorized
        403:
          description: Forbidden â€“ Only the patient's doctor or an admin may delete
        404:
          description: Patient not found
        500:
          description: Internal server error
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  /deletedoctor/{doctor_id}:
    delete:
      security:
        - bearerAuth: []
      description: >
        Deletes a doctor by ID. Also deletes all patients assigned to that doctor, 
        and all messages involving those patients.
      parameters:
        - name: doctor_id
          in: path
          required: true
          description: UUID of the doctor to delete
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Doctor, their patients, and associated messages successfully deleted
        401:
          description: Unauthorized
        403:
          description: Forbidden â€“ Only admins may delete doctors
        404:
          description: Doctor not found
        500:
          description: Internal server error
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  /device/{patient_id}:
    post:
      security:
        - bearerAuth: []
      description: Register a device to a patient using a hardware ID.
      parameters:
        - name: patient_id
          in: path
          required: true
          description: UUID of the patient registering the device
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hardware_id
              properties:
                hardware_id:
                  type: string
                  description: Unique hardware identifier of the ESP32-C3 device
      responses:
        200:
          description: Device registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  device_id:
                    type: string
                    format: uuid
        400:
          description: Missing or invalid hardware_id
        401:
          description: Unauthorized
        403:
          description: Forbidden â€“ Not allowed to register for this patient
        500:
          description: Internal server error
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  /assignments/patient/{patient_id}:
    post:
      security:
        - bearerAuth: []
      summary: Assign a new exercise to a patient
      description: >
        Creates a new exercise assignment for the specified patient.
        The assignment includes name, finger, flexion, and reps fields stored in JSONB.
      parameters:
        - name: patient_id
          in: path
          required: true
          description: UUID of the patient receiving the assignment
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - finger
                - flexion
                - reps
              properties:
                name:
                  type: string
                finger:
                  type: string
                flexion:
                  type: integer
                reps:
                  type: integer
      responses:
        201:
          description: Assignment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Assignment created
                  assignment:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                          finger:
                            type: string
                          flexion:
                            type: integer
                          reps:
                            type: integer
        400:
          description: Missing required fields
        403:
          description: Unauthorized â€” patient mismatch or invalid role
        500:
          description: Internal server error
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    get:
      security:
        - bearerAuth: []
      summary: Get all exercise assignments for a patient
      description: Returns a list of all exercises assigned to the specified patient.
      parameters:
        - name: patient_id
          in: path
          required: true
          description: UUID of the patient
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of exercise assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    data:
                      type: object
                      properties:
                        name:
                          type: string
                        finger:
                          type: string
                        flexion:
                          type: integer
                        reps:
                          type: integer
        401:
          description: Unauthorized
        403:
          description: Forbidden â€“ not allowed to access this patientâ€™s data
        500:
          description: Internal server error
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  /assignments/{assignment_id}:
    patch:
      security:
        - bearerAuth: []
      summary: Modify an existing assignment
      description: >
        Updates any subset of fields for a given assignment.
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                finger:
                  type: string
                flexion:
                  type: integer
                reps:
                  type: integer
      responses:
        200:
          description: Assignment updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  assignment:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                          finger:
                            type: string
                          flexion:
                            type: integer
                          reps:
                            type: integer
        403:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Internal Server Error
  /runner/{device_id}:
    post:
      security:
        - bearerAuth: []
      summary: Submit runner data for a device
      description: Store exercise execution data from a device.
      parameters:
        - name: device_id
          in: path
          required: true
          description: UUID of the registered device
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  properties:
                    name:
                      type: string
                    finger:
                      type: string
                    flexion:
                      type: integer
                    reps:
                      type: integer
                    hardware_id:
                      type: string
      responses:
        201:
          description: Runner data saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  runner:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      data:
                        type: object
        400:
          description: Bad request (missing or invalid data)
        404:
          description: Device not found
        500:
          description: Internal Server Error
  

  /runner:
    get:
      summary: Get all runner entries
      description: Returns every row in the runner table.
      #security:
      #  - bearerAuth: []
      responses:
        '200':
          description: List of runner records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Runner'
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

    delete:
      summary: Delete all runner entries
      description: Deletes *all* rows in the `runner` table.
      responses:
        '200':
          description: All runner records deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'


  /devices/{patient_id}:
    get:
      security:
        - bearerAuth: []
      summary: Get devices assigned to a patient
      description: Returns all devices registered to the specified patient.
      parameters:
        - name: patient_id
          in: path
          required: true
          description: UUID of the patient
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of devices
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    hardware_id:
                      type: string
        403:
          description: Unauthorized access
        500:
          description: Internal Server Error
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  /results/{device_id}:
    get:
      security:
        - bearerAuth: []
      summary: Get all results from a device
      description: Returns all stored result records for a given device.
      parameters:
        - name: device_id
          in: path
          required: true
          description: UUID of the device
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    data:
                      type: object
                    created_at:
                      type: string
                      format: date-time
        403:
          description: Unauthorized
        500:
          description: Internal server error
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    post:
      #security:
      #  - bearerAuth: []
      summary: Submit a result for a device
      description: Adds a new result record to the specified device.
      parameters:
        - name: device_id
          in: path
          required: true
          description: UUID of the device
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  description: Arbitrary JSON data from the device
      responses:
        201:
          description: Result recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Result recorded
                  result:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      created_at:
                        type: string
                        format: date-time
        400:
          description: Missing or invalid result data
        401:
          description: Unauthorized
        500:
          description: Internal Server Error 
  /devices/search/{hardware_id}:
    get:
      security:
        - bearerAuth: []
      summary: Find device by hardware ID
      description: Search for a device by its hardware ID and return its UUID.
      parameters:
        - name: hardware_id
          in: path
          required: true
          description: The unique hardware ID of the device (e.g. MAC or chip ID)
          schema:
            type: string
      responses:
        200:
          description: Device found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  hardware_id:
                    type: string
        404:
          description: Device not found
        500:
          description: Internal Server Error
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UnexpectedError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Credentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    User:
      type: object
      required:
        - id
        - accessToken
        - role
        - email
        - name
      properties:
        id:
          type: string
          format: uuid
        accessToken:
          type: string
        role:
          type: string
        email:
          type: string
        name:
          type: string

    Finger:
      type: object
      required:
        - id
        - patient_id
        - data
      properties:
        id:
          type: string
          format: uuid
        patient_id:
          type: string
          format: uuid
        data:
          type: object
          required:
            - name
            - position
          properties:
            name:
              type: string
            position:
              type: array
              items:
                type: number
              minItems: 9
              maxItems: 9

    NewMessage:
      type: object
      required:
        - content
      properties:
        content:
          type: string

    Message:
      type: object
      required:
        - id
        - sender_id
        - recipient_id
        - content
        - sent_at
      properties:
        id:
          type: string
          format: uuid
        sender_id:
          type: string
          format: uuid
        recipient_id:
          type: string
          format: uuid
        content:
          type: string
        sent_at:
          type: string
          format: date-time

    Doctor:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string

    
    Runner:                                 
      type: object
      required:
        - id
        - device_id
        - data
      properties:
        id:
          type: string
          format: uuid
        device_id:
          type: string
          format: uuid
        data:
          type: object


