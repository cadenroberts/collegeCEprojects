db has been reset for last time

##ENTER DB:
docker exec -it thera-hand-backend psql -U postgres

#Check DB:
\c
    you'll want to see postgres

#LIST ALL TABLES:
\dt

#FIND ALL USERS:
SELECT id, data->>'email' AS email, data->>'name' AS name, role FROM users;

#FIND USER BY EMAIL:
SELECT id, data->>'email', data->>'name', role FROM users WHERE data->>'email' = 'aliyaa@therahand.com';

#LIST ALL PATIENTS:
SELECT * FROM patients;

DELETE FROM users
WHERE id = '46d8eb86-d159-42ec-85f9-2bac9fae42a8';

-- 1 List all runner rows
SELECT
  id,
  device_id,
  data
FROM runner
ORDER BY id;

-- 2 Find a specific patient’s runner entries
--    a First, grab their user/patient UUID:
SELECT id
FROM users
WHERE data->>'email' = 'aliyaa@therahand.com';

--    b Then plug that UUID into:
SELECT
  r.id         AS runner_id,
  r.device_id,
  r.data
FROM runner r
JOIN patient_devices pd    ON r.device_id = pd.device_id
WHERE pd.patient_id = '0744ab7c-5cad-4f63-af58-cf2ff6491577'
ORDER BY r.id;

-- (Or, in one shot—join through users → patients:)
SELECT
  r.id          AS runner_id,
  d.hardware_id,
  r.data
FROM runner r
JOIN devices d            ON d.id = r.device_id
JOIN patient_devices pd   ON pd.device_id = r.device_id
JOIN users u              ON u.id = pd.patient_id
WHERE u.data->>'email' = 'aliyaa@therahand.com';

-- 3 Insert a new runner entry
--    (replace DEVICE_UUID and the JSON as needed)
INSERT INTO runner (device_id, data)
VALUES (
  '7572ad56-57cd-4e2a-a2a5-61cfe8698fb1',
  '{"reps": 1, "threshold": 75}'::jsonb
)
RETURNING id;

-- 4 Update an existing runner’s data
--    (replace RUNNER_UUID and the JSON payload)
UPDATE runner
SET data = '{"reps":1,"threshold":75}'::jsonb
WHERE id = '72de53a4-4432-4510-8dbf-cdfe89cd417b';

-- 5 Delete a runner entry
DELETE FROM runner
WHERE id = '26204479-2692-4e1f-8138-288f483dc2d7';

-- 0 (Optional) inspect table schema
\d+ devices

-- 1 List *all* devices
SELECT
  id,
  hardware_id
FROM devices
ORDER BY hardware_id;

-- 2 Find a device by its UUID
SELECT
  id,
  hardware_id
FROM devices
WHERE id = 'PASTE_DEVICE_UUID_HERE';

-- 3 Find a device by its hardware_id
SELECT
  id,
  hardware_id
FROM devices
WHERE hardware_id = 'my-esp32-001';

-- 4 List *all* devices assigned to a given patient
SELECT
  d.id         AS device_id,
  d.hardware_id
FROM devices d
JOIN patient_devices pd   ON pd.device_id = d.id
WHERE pd.patient_id = 'ff833e56-6e49-45e2-a70a-e43e9b6dda7b'
ORDER BY d.hardware_id;

-- 5 Create (insert) a new device
INSERT INTO devices (hardware_id)
VALUES ('new-esp32-123')
RETURNING id;

-- 6 Update an existing device’s hardware_id
UPDATE devices
SET hardware_id = 'updated-hardware-id-456'
WHERE id = 'PASTE_DEVICE_UUID_HERE';

-- 7 Delete a device completely
DELETE FROM devices
WHERE id = '5e48fa93-2e4a-4775-ae91-340f37ba81d4';

-- 8 Assign an existing device to a patient
INSERT INTO patient_devices (patient_id, device_id)
VALUES (
  '0744ab7c-5cad-4f63-af58-cf2ff6491577',  -- patient UUID
  'PASTE_DEVICE_UUID_HERE'                -- device UUID
);

-- 9 Remove (unassign) a device from a patient
DELETE FROM patient_devices
WHERE patient_id = '0744ab7c-5cad-4f63-af58-cf2ff6491577'
  AND device_id  = 'PASTE_DEVICE_UUID_HERE';


--------------ASSIGNMENTS---------------------

VIEW ALL ASSIGNMENTS
SELECT
  id,
  patient_id,
  data
FROM assignments
ORDER BY id;


VIEW ASSIGNMENTS FOR A SPECIFIC PATIENT
SELECT
  id,
  patient_id,
  data
FROM assignments
WHERE patient_id = 'PATIENT_UUID_HERE'
ORDER BY id;


INSERT A NEW ASSIGNMENT
INSERT INTO assignments (patient_id, data)
VALUES (
  'PATIENT_UUID_HERE',
  '{"exercise":"finger-flex","threshold":50,"notes":"Do slowly"}'::jsonb
)
RETURNING id, patient_id, data;


UPDATE AN EXISTING ASSIGNMENT
UPDATE assignments
SET data = '{"exercise":"finger-flex","threshold":60,"notes":"Speed up"}'::jsonb
WHERE id = 'ASSIGNMENT_UUID_HERE';

DELETE AN ASSIGNMENT
DELETE FROM assignments
WHERE id = '58c076cb-91b3-4095-b560-67cb0e37d37e';

---------------------RESULTS-----------------------

VIEW ALL RESULTS
SELECT
  id,
  device_id,
  data,
  created_at
FROM results
ORDER BY created_at DESC;

VIEW RESULTS FOR A SPECIFIC PATIENT
SELECT
  r.id,
  r.device_id,
  r.data,
  r.created_at
FROM results r
JOIN patient_devices pd
  ON pd.device_id = r.device_id
WHERE pd.patient_id = 'PATIENT_UUID_HERE'
ORDER BY r.created_at DESC;


INSERT A NEW RESULT
INSERT INTO results (device_id, data)
VALUES (
  '7572ad56-57cd-4e2a-a2a5-61cfe8698fb1',
  '{
  "pinky": [
    0.0,
    0.0,
    42.5,
    49.9,
    49.7,
    49.5,
    49.0,
    48.7,
    48.5,
    46.7,
    47.4,
    46.9,
    46.6,
    0.0,
    2.8,
    7.2,
    10.1,
    12.6,
    12.9,
    13.5,
    13.6
  ],
  "ring": [
    0.0,
    0.0,
    0.0,
    0.1,
    13.4,
    19.8,
    21.3,
    21.2,
    21.2,
    21.2,
    21.2,
    21.2,
    21.2,
    21.2,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ],
  "middle": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    15.1,
    45.2,
    46.2,
    45.2,
    44.8,
    44.7,
    44.8,
    43.7,
    43.6,
    3.3,
    1.6,
    0.0,
    0.1,
    0.0,
    0.0
  ],
  "pointer": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.1,
    0.0,
    0.0,
    17.4,
    39.4,
    41.9,
    43.3,
    42.8,
    43.0,
    43.0,
    42.8,
    2.7,
    7.8,
    9.5,
    9.7,
    10.1
  ],
  "thumb": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    6.0,
    15.8,
    19.3,
    17.8,
    17.7,
    17.5,
    17.3,
    0.0,
    0.0,
    0.0,
    0.1
  ],
  "timestamp_s": [
    0.0,
    0.5,
    1.0,
    1.5,
    2.0,
    2.5,
    3.0,
    3.5,
    4.0,
    4.5,
    5.0,
    5.5,
    6.0,
    6.5,
    7.0,
    7.5,
    8.0,
    8.5,
    9.0,
    9.5,
    10.0
  ]
}'::jsonb
)
RETURNING id, device_id, data, created_at;

UPDATE AN EXISTING RESULT
UPDATE results
SET data = '{"id":1,"threshold":45,"reps":12,"run":2}'::jsonb
WHERE id = 'RESULT_UUID_HERE';


DELETE A RESULT
DELETE FROM results
WHERE id = 'ae8cdca2-926d-4fd3-862c-4ffafc4ca6bd';



docker exec -i thera-hand-backend psql -U postgres < schema.sql

docker exec -i thera-hand-backend psql -U postgres < data.sql